<project name="beepcore" default="core-jar" basedir=".">

    <!-- The build.properties file defines the parth to local jar files -->
    <property file="build.properties"/>               

    <property name="name" value="beepcore" />
    <property name="Name" value="BEEP Core" />
    <property name="version" value="0.9.08" />
    <property name="release.name" value="${name}-${version}" />

    <property name="debug"             value="on"/>
    <property name="optimize"          value="on"/>
    <property name="deprecation"       value="off"/>

    <!-- Construct classpath for building core -->
    <path id="core.compile.classpath">
        <pathelement location="${concurrent.jar}"/>
        <pathelement location="${commons-logging.jar}"/>
        <pathelement location="${xml-parser.jar}"/>
    </path>

    <property name="beepcore.home" value="."/>
    <property name="build.dir" value="build" />
    <property name="release.dir" value="${build.dir}/${release.name}" />

    <!-- Core properties -->
    <property name="core.build.dir" value="${build.dir}/core" />
    <property name="core.doc.dir" value="${release.dir}/doc/core" />
    <property name="core.jar.name" value="beepcore.jar" />
    <property name="core.src.dir" value="src" />
    <property name="core.packages" value="org.beepcore.beep.core,org.beepcore.beep.util,org.beepcore.beep.transport.tcp,org.beepcore.beep.lib,org.beepcore.beep.profile,org.beepcore.beep.profile.echo,org.beepcore.beep.profile.tls"/>

    <property name="source.jar.name" value="beepsource.jar"/>

    <!-- Construct classpath for building sub-projects -->
    <path id="compile.classpath">
        <path refid="core.compile.classpath"/>
        <pathelement location="${release.dir}/lib/${core.jar.name}"/>
    </path>

    <!-- Examples properties -->
    <property name="example.build.dir" value="${build.dir}/example" />
    <property name="example.jar.name" value="example.jar" />
    <property name="example.src.dir" value="example" />

    <property name="jdk.doc.dir" value="doc/jdk" />

    <!-- SASL properties -->
    <property name="sasl.build.dir" value="${build.dir}/sasl"/>
    <property name="sasl.doc.dir" value="${release.dir}/doc/sasl"/>
    <property name="sasl.jar.name" value="beepsasl.jar"/>
    <property name="sasl.src.dir" value="src"/>

    <!-- JSSE TLS properties -->
    <property name="tls-jsse.build.dir" value="${build.dir}/tls-jsse" />
    <property name="tls-jsse.doc.dir" value="${release.dir}/doc/tls-jsse" />
    <property name="tls-jsse.jar.name" value="beeptls-jsse.jar" />

    <property name="jsse.doc.dir" value="doc/jsse" />

    <!-- PTLS TLS properties -->
    <property name="tls-ptls.build.dir" value="${build.dir}/tls-ptls" />
    <property name="tls-ptls.doc.dir" value="${release.dir}/doc/tls-ptls" />
    <property name="tls-ptls.jar.name" value="beeptls-ptls.jar" />

    <property name="puretls.doc.dir" value="doc/puretls" />

    <!-- TLS properties -->
    <property name="tls.src.dir" value="tls" />

    <property name="doc-ref-offline" value="false" />

    <!-- Test properties -->
    <property name="test.build.dir"  value="${build.dir}/test" />
    <property name="test.src.dir"  value="test" />



    <target name="-init">
        <mkdir dir="${core.build.dir}" />
        <condition property="javadoc.param" value="-breakiterator">
            <or>
	        <equals arg1="${ant.java.version}" arg2="1.4"/>
	        <equals arg1="${ant.java.version}" arg2="1.5"/>
            </or>
        </condition>
        <property name="javadoc.param" value="" />
    </target>

    <!-- Core targets -->
    <target name="core" depends="-init">
        <mkdir dir="${core.build.dir}"/>
	<javac srcdir="${core.src.dir}/"
	       destdir="${core.build.dir}"
	       classpathref="core.compile.classpath"
	       debug="${debug}"
	       optimize="${optimize}"
	       deprecation="${deprecation}">
            <include name="**/core/*.java"/>
            <include name="**/core/event/*.java"/>
            <include name="**/lib/*.java"/>
            <include name="**/profile/*.java"/>
            <include name="**/profile/echo/*.java"/>
            <include name="**/profile/tls/*.java"/>
            <include name="**/transport/**/*.java"/>
            <include name="**/util/*.java"/>
        </javac>
    </target>

    <target name="core-jar" depends="core">
        <mkdir dir="${release.dir}/lib"/>
        <jar jarfile="${release.dir}/lib/${core.jar.name}"
	     basedir="${core.build.dir}"/>
    </target>

    <target name="core-doc" depends="core-jar" description="Creates the API documentation for Core">
        <mkdir dir="${core.doc.dir}"/>
	<javadoc packagenames="${core.packages}"
                 sourcepath="${core.src.dir}/"
	         destdir="${core.doc.dir}"
		 author="false"
		 version="false"
		 overview="${core.src.dir}/overview.html"
		 windowtitle="${Name} API"
		 doctitle="${Name}"
		 additionalparam="${javadoc.param}"
		 bottom="Copyright &#169; 2001 Invisible Worlds, Inc. All Rights Reserved.">
	    <classpath refid="compile.classpath"/>
        </javadoc>
    </target>

    <target name="core-dist" depends="core-doc">
        <mkdir dir="${build.dir}/src/${release.name}/src"/>

        <copy todir="${build.dir}/src/${release.name}/src">
            <fileset dir="${core.src.dir}"/>
        </copy>
        <copy todir="${build.dir}/src/${release.name}/tls">
            <fileset dir="${tls.src.dir}"/>
        </copy>
	<copy file="build.xml"
              tofile="${build.dir}/src/${release.name}/build.xml"/>

	<fixcrlf srcdir="${build.dir}/src/${release.name}"
                 cr="remove" eof="remove"/>

        <jar jarfile="${release.dir}/${source.jar.name}"
	     basedir="${build.dir}/src"/>

	<copy file="${commons-logging.jar}"
	      tofile="${release.dir}/lib/commons-logging.jar"/>
	<copy file="lib/LICENSE.commons-logging"
	      tofile="${release.dir}/LICENSE.commons-logging"/>
	<copy file="${concurrent.jar}"
	      tofile="${release.dir}/lib/concurrent.jar"/>
	<copy file="lib/xerces.jar"
	      tofile="${release.dir}/lib/xerces.jar"/>
	<copy file="lib/LICENSE.xerces"
	      tofile="${release.dir}/LICENSE.xerces"/>

	<copy file="lib/VERSIONS"
	      tofile="${release.dir}/lib/VERSIONS"/>

	<copy file="LICENSE.txt" tofile="${release.dir}/LICENSE.txt"/>
	<copy file="README.txt" tofile="${release.dir}/README.txt"/>
	<copy file="README_SASL.htm" tofile="${release.dir}/README_SASL.htm"/>
	<copy file="GettingStarted.txt"
	      tofile="${release.dir}/GettingStarted.txt"/>

	<fixcrlf srcdir="${release.dir}"
                 cr="remove" eof="remove" includes="*.txt"/>
	<fixcrlf srcdir="${release.dir}"
                 cr="remove" eof="remove" includes="*.htm"/>
    </target>

    <!-- Example targets -->
    <target name="example-compile" depends="core-jar,sasl">
        <mkdir dir="${example.build.dir}"/>
	<javac srcdir="${example.src.dir}/"
	       destdir="${example.build.dir}"
               debug="${debug}"
               optimize="${optimize}"
               deprecation="${deprecation}">
            <exclude name="**/util/Log4JLog.java"/>
	    <classpath>
                 <path refid="compile.classpath"/>
		 <pathelement location="${release.dir}/lib/${sasl.jar.name}"/>
            </classpath>
        </javac>
    </target>

    <target name="example" depends="example-compile">
        <mkdir dir="${release.dir}/lib"/>
        <jar jarfile="${release.dir}/lib/${example.jar.name}"
	     basedir="${example.build.dir}">
	    <include name="**/*.class"/>
	</jar>
    </target>

    <target name="example-dist" depends="example">
        <mkdir dir="${release.dir}/example"/>

        <copy todir="${release.dir}/example">
            <fileset dir="${example.src.dir}"/>
        </copy>

	<fixcrlf srcdir="${release.dir}/example" cr="remove" eof="remove"/>
    </target>

    <!-- Test targets -->
    <target name="test" depends="example">
        <mkdir dir="${test.build.dir}"/>
	<javac srcdir="${test.src.dir}/"
	       destdir="${test.build.dir}"
               debug="${debug}"
               optimize="${optimize}"
               deprecation="${deprecation}">
            <include name="**/*.java"/>
	    <classpath>
                 <path refid="compile.classpath"/>
		 <pathelement location="${release.dir}/lib/${sasl.jar.name}"/>
		 <pathelement location="${example.build.dir}"/>
            </classpath>
        </javac>
    </target>

    <!-- SASL targets -->
    <target name="sasl-compile" depends="core-jar">
        <mkdir dir="${sasl.build.dir}"/>
        <javac srcdir="${sasl.src.dir}/"
	       destdir="${sasl.build.dir}"
	       classpathref="compile.classpath"
               debug="${debug}"
               optimize="${optimize}"
               deprecation="${deprecation}">
            <include name="**/sasl/**/*.java"/>
        </javac>
    </target>

    <target name="sasl" depends="sasl-compile">
        <mkdir dir="${release.dir}/lib"/>
        <jar jarfile="${release.dir}/lib/${sasl.jar.name}"
	     basedir="${sasl.build.dir}"/>
    </target>

    <target name="sasl-doc" depends="sasl">
        <mkdir dir="${sasl.doc.dir}"/>
	<javadoc packagenames="org.beepcore.beep.profile.sasl.*"
                 sourcepath="${sasl.src.dir}/"
	         destdir="${sasl.doc.dir}"
		 author="false"
		 version="false"
		 windowtitle="SASL Profile API"
		 doctitle="SASL Profile"
		 additionalparam="${javadoc.param}"
		 bottom="Copyright &#169; 2001 Invisible Worlds, Inc. All Rights Reserved.">
	    <classpath>
                 <path refid="compile.classpath"/>
		 <pathelement location="${release.dir}/lib/${sasl.jar.name}"/>
            </classpath>
        </javadoc>
    </target>

    <!-- JSSE targets -->
    <target name="tls-jsse-compile" depends="core-jar">
        <mkdir dir="${tls-jsse.build.dir}"/>
        <javac srcdir="${tls.src.dir}/"
	       destdir="${tls-jsse.build.dir}"
	       classpathref="compile.classpath"
               debug="${debug}"
               optimize="${optimize}"
               deprecation="${deprecation}">
            <include name="**/jsse/*.java"/>
        </javac>
    </target>

    <target name="tls-jsse" depends="tls-jsse-compile">
        <mkdir dir="${release.dir}/lib"/>
        <jar jarfile="${release.dir}/lib/${tls-jsse.jar.name}"
	     basedir="${tls-jsse.build.dir}">
	    <include name="**"/>
	</jar>
    </target>

    <target name="tls-jsse-doc" depends="tls-jsse,core-doc">
        <mkdir dir="${tls-jsse.doc.dir}"/>
	<javadoc packagenames="org.beepcore.beep.profile.tls.jsse"
                 sourcepath="${tls.src.dir}/"
	         destdir="${tls-jsse.doc.dir}"
		 author="false"
		 version="false"
		 windowtitle="JSSE TLS Profile API"
		 doctitle="JSSE TLS Profile"
		 additionalparam="${javadoc.param}"
		 bottom="Copyright &#169; 2001 Invisible Worlds, Inc. All Rights Reserved.">
	    <link offline="${doc-ref-offline}"
	          href="http://java.sun.com/products/jdk/1.3/docs/api"
		  packagelistLoc="${jdk.doc.dir}" />
	    <link offline="${doc-ref-offline}"
	          href="http://java.sun.com/products/jsse/doc/apidoc"
		  packagelistLoc="${jsse.doc.dir}" />
	    <link offline="true"
	          href="file://../core"
		  packagelistLoc="${core.doc.dir}" />
	    <classpath>
                 <path refid="core.compile.classpath"/>
		 <pathelement location="${release.dir}/lib/${core.jar.name}"/>
		 <pathelement location="${release.dir}/lib/${tls-jsse.jar.name}"/>
            </classpath>
        </javadoc>
    </target>

    <!-- PTLS targets -->
    <target name="tls-ptls-compile" depends="core-jar">
        <mkdir dir="${tls-ptls.build.dir}"/>
        <javac srcdir="${tls.src.dir}/"
	       destdir="${tls-ptls.build.dir}"
               debug="${debug}"
               optimize="${optimize}"
               deprecation="${deprecation}">
            <include name="**/ptls/*.java"/>
	    <classpath>
                 <path refid="compile.classpath"/>
                 <pathelement location="${cryptix.jar}"/>
                 <pathelement location="${cryptix-asn1.jar}"/>
                 <pathelement location="${puretls.jar}"/>
            </classpath>
        </javac>
    </target>

    <target name="tls-ptls" depends="tls-ptls-compile">
        <mkdir dir="${release.dir}/lib"/>
        <jar jarfile="${release.dir}/lib/${tls-ptls.jar.name}"
	     basedir="${tls-ptls.build.dir}"/>
    </target>

    <target name="tls-ptls-doc" depends="tls-ptls,core-doc">
        <mkdir dir="${tls-ptls.doc.dir}"/>
	<javadoc packagenames="org.beepcore.beep.profile.tls.ptls"
                 sourcepath="${tls.src.dir}/"
	         destdir="${tls-ptls.doc.dir}"
		 author="false"
		 version="false"
		 windowtitle="PureTLS TLS Profile API"
		 doctitle="PureTLS TLS Profile"
		 additionalparam="${javadoc.param}"
		 bottom="Copyright &#169; 2001 Invisible Worlds, Inc. All Rights Reserved.">
	    <link offline="${doc-ref-offline}"
	          href="http://java.sun.com/products/jdk/1.3/docs/api"
		  packagelistLoc="${jdk.doc.dir}" />
	    <link offline="true"
	          href="file://../core"
		  packagelistLoc="${core.doc.dir}" />
	    <classpath>
                 <path refid="compile.classpath"/>
                 <pathelement location="${cryptix.jar}"/>
                 <pathelement location="${cryptix-asn1.jar}"/>
                 <pathelement location="${puretls.jar}"/>
		 <pathelement location="${release.dir}/lib/${tls-ptls.jar.name}"/>
            </classpath>
        </javadoc>
    </target>

    <target name="ptls-dist" depends="tls-ptls">
	<copy file="lib/cryptix32.jar"
	      tofile="${release.dir}/lib/cryptix32.jar"/>
	<copy file="lib/cryptix-asn1.jar"
	      tofile="${release.dir}/lib/cryptix-asn1.jar"/>
	<copy file="lib/puretls.jar"
	      tofile="${release.dir}/lib/puretls.jar"/>
	<copy file="lib/LICENSE.cryptix"
	      tofile="${release.dir}/LICENSE.cryptix"/>
	<copy file="lib/LICENSE.puretls"
	      tofile="${release.dir}/LICENSE.puretls"/>
    </target>

    <!-- Packages the distribution with ZIP -->
    <target name="dist-zip" depends="core-dist,doc,example-dist,ptls-dist">
        <zip zipfile="${build.dir}/${release.name}.zip"
	     basedir="${release.dir}/.." includes="${release.name}/**"/>
    </target>

    <!-- Packages the distribution with TAR-GZIP -->
    <target name="dist-tgz" depends="core-dist,doc,example-dist,ptls-dist">
        <tar tarfile="${build.dir}/${release.name}.tar"
	     basedir="${release.dir}/.." includes="${release.name}/**"/>
        <gzip zipfile="${build.dir}/${release.name}.tgz"
	      src="${build.dir}/${release.name}.tar"/>
	<delete file="${build.dir}/${release.name}.tar"/>
    </target>

    <target name="dist" depends="dist-zip,dist-tgz"/>

    <target name="doc" depends="core-doc,sasl-doc,tls-jsse-doc,tls-ptls-doc"/>

    <target name="clean">
        <delete dir="${build.dir}" />
        <delete dir="${doc.dir}" />
    </target>
</project>
